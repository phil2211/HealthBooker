AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Health Worker Booking System - Multi-tenant reservation system
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    Environment:
      Variables:
        MONGODB_URI:
          Ref: MongoDBUri
        JWT_SECRET:
          Ref: JwtSecret
        FROM_EMAIL:
          Ref: FromEmail
        BASE_URL:
          Ref: BaseUrl
Parameters:
  MongoDBUri:
    Type: String
    Description: MongoDB Atlas connection string
    Default: mongodb+srv://username:password@cluster.mongodb.net/healthbooker
  JwtSecret:
    Type: String
    Description: JWT secret key for authentication
    Default: your-super-secret-jwt-key-change-this-in-production
  AwsRegion:
    Type: String
    Description: AWS region for SES service
    Default: eu-central-1
  FromEmail:
    Type: String
    Description: From email address
    Default: noreply@healthbooker.local
  BaseUrl:
    Type: String
    Description: Base URL for the application
    Default: http://localhost:3000
Resources:
  HealthBookingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: RegisterFunction
      Handler: register-working.handler
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /auth/register
            Method: post
    Metadata:
      SamResourceId: RegisterFunction
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LoginFunction
      Handler: login-working.handler
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /auth/login
            Method: post
    Metadata:
      SamResourceId: LoginFunction
  VerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: VerifyFunction
      Handler: verify-working.handler
      Events:
        VerifyApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /auth/verify
            Method: get
    Metadata:
      SamResourceId: VerifyFunction
  GetProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetProfileFunction
      Handler: getProfile.handler
      Events:
        GetProfileApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /therapist/{id}/profile
            Method: get
    Metadata:
      SamResourceId: GetProfileFunction
  GetAvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetAvailabilityFunction
      Handler: getAvailability.handler
      Events:
        GetAvailabilityApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /therapist/{id}/availability
            Method: get
    Metadata:
      SamResourceId: GetAvailabilityFunction
  UpdateAvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpdateAvailabilityFunction
      Handler: updateAvailability-working.handler
      Events:
        UpdateAvailabilityApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /therapist/availability
            Method: put
        GetAvailabilityApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /therapist/availability
            Method: get
    Metadata:
      SamResourceId: UpdateAvailabilityFunction
  GetBookingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetBookingsFunction
      Handler: getBookings-working.handler
      Events:
        GetBookingsApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /therapist/bookings
            Method: get
    Metadata:
      SamResourceId: GetBookingsFunction
  ListTherapistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListTherapistsFunction
      Handler: list-working.handler
      Events:
        ListTherapistsApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /therapist/list
            Method: get
    Metadata:
      SamResourceId: ListTherapistsFunction
  CreateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateBookingFunction
      Handler: create-working.handler
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
      Events:
        CreateBookingApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /booking/create
            Method: post
    Metadata:
      SamResourceId: CreateBookingFunction
  CancelBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CancelBookingFunction
      Handler: cancel-working.handler
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
      Events:
        CancelBookingApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /booking/cancel/{token}
            Method: delete
    Metadata:
      SamResourceId: CancelBookingFunction
  UpdateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpdateBookingFunction
      Handler: update-working.handler
      Events:
        UpdateBookingApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /booking/update/{token}
            Method: put
    Metadata:
      SamResourceId: UpdateBookingFunction
  GetBookingDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetBookingDetailsFunction
      Handler: details-working.handler
      Events:
        GetBookingDetailsApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: HealthBookingApi
            Path: /booking/details/{token}
            Method: get
    Metadata:
      SamResourceId: GetBookingDetailsFunction
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: healthbooker-frontend-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: FrontendBucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${FrontendBucket}/*
Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${HealthBookingApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiUrl
  FrontendUrl:
    Description: Frontend website URL
    Value:
      Fn::Sub: http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FrontendUrl
  FrontendBucketName:
    Description: S3 bucket name for frontend
    Value:
      Ref: FrontendBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FrontendBucket
