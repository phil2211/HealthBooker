AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Health Worker Booking System - Multi-tenant reservation system

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs20.x
    Environment:
      Variables:
        MONGODB_URI: !Ref MongoDBUri
        JWT_SECRET: !Ref JwtSecret
        AWS_REGION: !Ref AwsRegion
        FROM_EMAIL: !Ref FromEmail
        BASE_URL: !Ref BaseUrl

Parameters:
  MongoDBUri:
    Type: String
    Description: MongoDB Atlas connection string
    Default: mongodb+srv://username:password@cluster.mongodb.net/healthbooker
  
  JwtSecret:
    Type: String
    Description: JWT secret key for authentication
    Default: your-super-secret-jwt-key-change-this-in-production
  
  AwsRegion:
    Type: String
    Description: AWS region for SES service
    Default: eu-central-1
  
  FromEmail:
    Type: String
    Description: From email address
    Default: noreply@healthbooker.local
  
  BaseUrl:
    Type: String
    Description: Base URL for the application
    Default: http://localhost:3000

Resources:
  # API Gateway
  HealthBookingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Authentication Functions
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/register/
      Handler: register-working.handler
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /auth/register
            Method: post

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/login/
      Handler: login-working.handler
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /auth/login
            Method: post

  VerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/verify/
      Handler: verify-working.handler
      Events:
        VerifyApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /auth/verify
            Method: get

  # Therapist Functions
  GetProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/therapist/getProfile/
      Handler: getProfile.handler
      Events:
        GetProfileApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /therapist/{id}/profile
            Method: get

  GetAvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/therapist/getAvailability/
      Handler: getAvailability.handler
      Events:
        GetAvailabilityApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /therapist/{id}/availability
            Method: get

  UpdateAvailabilityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/therapist/updateAvailability/
      Handler: updateAvailability-working.handler
      Events:
        UpdateAvailabilityApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /therapist/availability
            Method: put
        GetAvailabilityApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /therapist/availability
            Method: get

  GetBookingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/therapist/getBookings/
      Handler: getBookings-working.handler
      Events:
        GetBookingsApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /therapist/bookings
            Method: get

  ListTherapistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/therapist/list/
      Handler: list-working.handler
      Events:
        ListTherapistsApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /therapist/list
            Method: get

  # Booking Functions
  CreateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/booking/create/
      Handler: create-working.handler
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
        CreateBookingApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /booking/create
            Method: post

  CancelBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/booking/cancel/
      Handler: cancel-working.handler
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
        CancelBookingApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /booking/cancel/{token}
            Method: delete

  UpdateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/booking/update/
      Handler: update-working.handler
      Events:
        UpdateBookingApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /booking/update/{token}
            Method: put

  GetBookingDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/booking/details/
      Handler: details-working.handler
      Events:
        GetBookingDetailsApi:
          Type: Api
          Properties:
            RestApiId: !Ref HealthBookingApi
            Path: /booking/details/{token}
            Method: get

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'healthbooker-frontend-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${FrontendBucket}/*'

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${HealthBookingApi}.execute-api.${AWS::Region}.amazonaws.com/prod/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  FrontendUrl:
    Description: Frontend website URL
    Value: !Sub 'http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-FrontendUrl'

  FrontendBucketName:
    Description: S3 bucket name for frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucket'
